buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'

    }
}
plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}
repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
}
group = 'com.jietang'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
configurations {
    mybatisGenerator
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework:spring-jdbc:4.3.2.RELEASE'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.mybatis:mybatis:3.4.3'
    implementation 'org.mybatis:mybatis-spring:1.3.1'
    implementation 'mysql:mysql-connector-java:5.1.26'
    implementation 'c3p0:c3p0:0.9.1.2'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.26'
}

test {
    useJUnitPlatform()
}

def getDbProperties = {
    Map map = new HashMap();
    def yaml = new org.yaml.snakeyaml.Yaml()
    map = (Map) yaml.load(new FileInputStream(new File("src/main/resources/application.yml")));
    map
}

task mybatisGenerate doLast {
    def properties = getDbProperties().get("jdbc")
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.get("driverClass")
    ant.properties['connectionURL'] = properties.get("jdbcUrl")
    ant.properties['userId'] = properties.get("user")
    ant.properties['password'] = String.valueOf(properties.get("password"))
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['modelPackage'] = "com.jietang.smart.entity"
    ant.properties['mapperPackage'] = "com.jietang.smart.dao"
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}
